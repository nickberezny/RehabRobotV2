{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.660e39476e44237c66ed.hot-update.js","sources":["webpack:///./games/Follow_game2.js"],"sourcesContent":["import React, { Component } from 'react'\r\nimport { connect } from 'react-redux'\r\nimport * as THREE from 'three'\r\n//import * as OBJLoader from 'three-obj-loader';\r\nimport { setParam } from \"../src/actions\";\r\n//OBJLoader(THREE);\r\n\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair.png\")\r\n//require(\"/home/rehab/Documents/RehabRobot/server/games/sprite/crosshair_yellow.png\" );\r\n\r\nclass Follow_game extends Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.start = this.start.bind(this)\r\n    this.stop = this.stop.bind(this)\r\n    this.animate = this.animate.bind(this)\r\n  }\r\n\r\n  componentDidMount() {\r\n\r\n    var points = 0;\r\n    var maxStroke = 200;\r\n    var text;\r\n\r\n    var group = new THREE.Group();\r\n\r\n    const width = this.mount.clientWidth\r\n    const height = this.mount.clientHeight\r\n\r\n    var scene = new THREE.Scene()\r\n    scene.background = new THREE.Color( 0xf7fdff );\r\n    \r\n    var camera = new THREE.OrthographicCamera( - width / 2, width / 2, height / 2, - height / 2, -100, 500000);\r\n    camera.position.set( 0,0,5);\r\n    scene.add( camera );\r\n\r\n    const renderer = new THREE.WebGLRenderer({ antialias: true })\r\n    renderer.setSize(width, height)\r\n\r\n    var geometry = new THREE.BoxGeometry( 100, 100, 100 );\r\n    var cubeMaterial = new THREE.MeshLambertMaterial({ color: 0xE86D00 });\r\n    var cube = new THREE.Mesh( geometry, cubeMaterial)\r\n\r\n    var cube2 = new THREE.Mesh( geometry, cubeMaterial)\r\n\r\n    cube.position.set( 0.0, 0.0, -70);\r\n    cube2.position.set(10.0, 10.0, -140);\r\n\r\n    var spotLight1 = new THREE.SpotLight( 0xffffff, 1 );\r\n    spotLight1.position.set( -width/3, 200, 200 );\r\n    var light = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 );\r\n    scene.add( light );\r\n    scene.add(spotLight1)\r\n\r\n    scene.add(cube);\r\n\r\n    this.scene = scene\r\n    this.camera = camera\r\n    this.renderer = renderer\r\n    this.clock = new THREE.Clock()\r\n    this.timer = 0;\r\n    this.start_game = 0;\r\n\r\n    this.cube = cube\r\n\r\n    //this.group = group;\r\n    this.points = points\r\n    \r\n    this.mount.appendChild(this.renderer.domElement)\r\n    this.start()\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    this.stop()\r\n    this.mount.removeChild(this.renderer.domElement)\r\n  }\r\n\r\n  start() {\r\n    if (!this.frameId) {\r\n      this.frameId = requestAnimationFrame(this.animate)\r\n    }\r\n  }\r\n\r\n  stop() {\r\n    cancelAnimationFrame(this.frameId)\r\n  }\r\n\r\n  animate() {\r\n\r\n\r\n    if(!this.start_game)\r\n    {\r\n\r\n      this.timer += this.clock.getDelta()\r\n      \r\n      var current_time = Math.round(5.8 - this.timer).toString()\r\n      var textMaterial = this.textMaterial\r\n\r\n      if(this.timer > 4.9) \r\n      {\r\n        this.start_game = 1;\r\n      }\r\n    }\r\n    else\r\n    {\r\n\r\n    this.factor = 280.0 / this.props.x_end\r\n\r\n    console.log('x_end' + this.props.x_end)\r\n    console.log('x cube' + this.factor*this.props.x)\r\n    console.log('xdes cube' + this.factor*this.props.xdes )\r\n\r\n    if(this.factor*this.props.x > this.factor*this.props.xdes - this.props.range && this.factor*this.props.x < this.factor*this.props.xdes + this.props.range)\r\n    {\r\n\r\n      if(this.points < 6000) this.points += 1;\r\n      \r\n      //this.cube.rotation.x += 0.02;\r\n      //this.cube.rotation.y += 0.01;\r\n      //this.cube.rotation.z += 0.015;\r\n\r\n    } else {\r\n\r\n      if(this.points > 0) this.points -= 3;\r\n\r\n    }\r\n\r\n    this.cube.rotation.x += 0.02 * this.points/2000;\r\n    this.cube.rotation.y += 0.01 * this.points/2000;\r\n    this.cube.rotation.z += 0.015 * this.points/2000;\r\n\r\n    this.cube.scale.set(1+this.points/3000,1+this.points/3000,1+this.points/3000)\r\n  }\r\n\r\n    this.renderScene()\r\n    this.frameId = window.requestAnimationFrame(this.animate)\r\n   \r\n  }\r\n\r\n  renderScene() {\r\n    this.renderer.render(this.scene, this.camera)\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      \r\n      <div\r\n        style={{ width: '800px', height: '800px' }}\r\n        ref={(mount) => { this.mount = mount }}\r\n      />\r\n    )\r\n  }\r\n}\r\n\r\nfunction mapStateToProps(state) {\r\n  \r\n  //map state variables to the component's state \r\n  return {\r\n    x: state.x,\r\n    xdes: state.xdes,\r\n    x_end: state.x_end,\r\n    range: state.range,\r\n  }\r\n}\r\n\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  {} //add importing action functions here\r\n)(Follow_game);"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;;;;;AACA;AAAA;AACA;AADA;AACA;AAAA;AAEA;AACA;AACA;AALA;AAMA;AACA;;;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;;;AAEA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;;;AAEA;AAGA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AAGA;AAGA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;;;AAEA;AACA;AACA;;;AAEA;AAAA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAFA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;;;;AA9IA;AACA;AAgJA;AAEA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AAEA;AAAA;;;;A","sourceRoot":""}